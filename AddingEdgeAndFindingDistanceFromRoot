import java.io.*;
import java.util.*;


class graph{

    int V;
    LinkedList<Integer>[] adj;
    
    graph(int v){
        V=v;
        adj=new LinkedList[v];
        
        for(int i=0;i<v;i++){
            adj[i]=new LinkedList();
        }
    }
    
    void addEdge(int u,int v){
        adj[u].add(v);
    }

   
        
    }





 class jam
{
        static void update(int b,graph g,int[] dist){
            
            for(Integer i:g.adj[b]){
                if(dist[i]>dist[b]+1){
                    dist[i]=dist[b]+1;
                    update(i,g,dist);
                }
            }
            
            
        }
	public static void main(String args[]) throws Exception
	{
		InputReader sc=new InputReader(System.in);		
		PrintWriter pw=new PrintWriter(new FileWriter("F:\\wer2.txt"));
      
           
            int n=sc.nextInt();
            int m=sc.nextInt();
            
            graph g=new graph(n);
            int[] dist=new int[n];
            
            for (int i = 1; i < n; i++) {
                dist[i]=Integer.MAX_VALUE-10;
            }
            
            for (int i = 0; i < m; i++) {
                int x =sc.nextInt();
                
                if(x==1){
                    int y=sc.nextInt();
                    y--;
                  
                    if(dist[y]==Integer.MAX_VALUE-10){
                        System.out.println("-1");
                    }else{
                        System.out.println(dist[y]);
                    }
                    
                }
                else{
                    int a=sc.nextInt()-1;
                    int b=sc.nextInt()-1;
                    g.addEdge(a, b);
                    
                    if(dist[b]>dist[a]+1){
                        dist[b]=dist[a]+1;
            //            System.out.println(dist[b]+"**");
                        update(b,g,dist);
                    }
                }
                
                
                
            }
            
                
 }
 }
	 class InputReader
	{
		private InputStream stream;
		private byte[] buf = new byte[1024];
		private int curChar;
		private int numChars;
		private SpaceCharFilter filter;
		
		public InputReader(InputStream stream)
		{
			this.stream = stream;
		}
		
		public int read()
		{
			if (numChars==-1) 
				throw new InputMismatchException();
			
			if (curChar >= numChars)
			{
				curChar = 0;
				try 
				{
					numChars = stream.read(buf);
				}
				catch (IOException e)
				{
					throw new InputMismatchException();
				}
				
				if(numChars <= 0)				
					return -1;
			}
			return buf[curChar++];
		}
	 
		public String nextLine()
		{
			BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
			String str = "";
            try
            {
                str = br.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
		}
		public int nextInt()
		{
			int c = read();
			
			while(isSpaceChar(c)) 
				c = read();
			
			int sgn = 1;
			
			if (c == '-') 
			{
				sgn = -1;
				c = read();
			}
			
			int res = 0;
			do 
			{
				if(c<'0'||c>'9') 
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			}
			while (!isSpaceChar(c)); 
			
			return res * sgn;
		}
		
		public long nextLong() 
		{
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-') 
			{
				sgn = -1;
				c = read();
			}
			long res = 0;
			
			do 
			{
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			}
			while (!isSpaceChar(c));
				return res * sgn;
		}
		
		public double nextDouble() 
		{
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-') 
			{
				sgn = -1;
				c = read();
			}
			double res = 0;
			while (!isSpaceChar(c) && c != '.') 
			{
				if (c == 'e' || c == 'E')
					return res * Math.pow(10, nextInt());
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			}
			if (c == '.') 
			{
				c = read();
				double m = 1;
				while (!isSpaceChar(c)) 
				{
					if (c == 'e' || c == 'E')
						return res * Math.pow(10, nextInt());
					if (c < '0' || c > '9')
						throw new InputMismatchException();
					m /= 10;
					res += (c - '0') * m;
					c = read();
				}
			}
			return res * sgn;
		}
		
		public String readString() 
		{
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do 
			{
				res.appendCodePoint(c);
				c = read();
			} 
			while (!isSpaceChar(c));
			
			return res.toString();
		}
	 
		public boolean isSpaceChar(int c) 
		{
			if (filter != null)
				return filter.isSpaceChar(c);
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}
	 
		public String next() 
		{
			return readString();
		}
		
		public interface SpaceCharFilter 
		{
			public boolean isSpaceChar(int ch);
		}
	}
